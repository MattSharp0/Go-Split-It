// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
/*
Group queries
Table structure:
id bigserial PRIMARY KEY,
name varchar NOT NULL
*/

INSERT INTO "groups" (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateGroup(ctx context.Context, name string) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, name)
	var i Group
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :one
DELETE FROM "groups"
WHERE id = $1
RETURNING id, name
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRow(ctx, deleteGroup, id)
	var i Group
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT 
  id, name
FROM "groups"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroupByID(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRow(ctx, getGroupByID, id)
	var i Group
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listGroups = `-- name: ListGroups :many
SELECT 
  id, name
FROM "groups"
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListGroupsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGroups(ctx context.Context, arg ListGroupsParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, listGroups, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE "groups"
SET name = $1
WHERE id = $2
RETURNING id, name
`

type UpdateGroupParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, updateGroup, arg.Name, arg.ID)
	var i Group
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
