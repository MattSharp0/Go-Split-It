// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package db

import (
	"context"
	"time"

	"github.com/shopspring/decimal"
)

const createTransaction = `-- name: CreateTransaction :one
/*
transaction queries
Table structure:
id bigserial PRIMARY KEY,
group_id bigint NOT NULL,
name varchar NOT NULL,
transaction_date date NOT NULL DEFAULT (CURRENT_DATE),
amount numeric(10,2) NOT NULL,
category varchar,
note varchar,
by_user bigint NOT NULL,
created_at timestamptz NOT NULL DEFAULT (now()),
modified_at timestamptz NOT NULL DEFAULT (now())
*/


INSERT INTO "transactions" (group_id, name, transaction_date, amount, category, note, by_user)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, group_id, name, transaction_date, amount, category, note, by_user, created_at, modified_at
`

type CreateTransactionParams struct {
	GroupID         int64           `json:"group_id"`
	Name            string          `json:"name"`
	TransactionDate time.Time       `json:"transaction_date"`
	Amount          decimal.Decimal `json:"amount"`
	Category        *string         `json:"category"`
	Note            *string         `json:"note"`
	ByUser          int64           `json:"by_user"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.GroupID,
		arg.Name,
		arg.TransactionDate,
		arg.Amount,
		arg.Category,
		arg.Note,
		arg.ByUser,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Name,
		&i.TransactionDate,
		&i.Amount,
		&i.Category,
		&i.Note,
		&i.ByUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :one
DELETE FROM "transactions" 
WHERE id = $1
RETURNING id, group_id, name, transaction_date, amount, category, note, by_user, created_at, modified_at
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRow(ctx, deleteTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Name,
		&i.TransactionDate,
		&i.Amount,
		&i.Category,
		&i.Note,
		&i.ByUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT 
    id, group_id, name, transaction_date, amount, category, note, by_user, created_at, modified_at 
FROM "transactions"
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Name,
		&i.TransactionDate,
		&i.Amount,
		&i.Category,
		&i.Note,
		&i.ByUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getTransactionByIDForUpdate = `-- name: GetTransactionByIDForUpdate :one
SELECT 
    id, group_id, name, transaction_date, amount, category, note, by_user, created_at, modified_at 
FROM "transactions"
WHERE id = $1 
LIMIT 1
FOR UPDATE
`

func (q *Queries) GetTransactionByIDForUpdate(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionByIDForUpdate, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Name,
		&i.TransactionDate,
		&i.Amount,
		&i.Category,
		&i.Note,
		&i.ByUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getTransactionsByGroupInPeriod = `-- name: GetTransactionsByGroupInPeriod :many
SELECT 
    id, group_id, name, transaction_date, amount, category, note, by_user, created_at, modified_at
FROM "transactions"
WHERE 
    group_id = $1
    and transaction_date between $4::date and $5::date
ORDER BY transaction_date desc
LIMIT $2
OFFSET $3
`

type GetTransactionsByGroupInPeriodParams struct {
	GroupID   int64     `json:"group_id"`
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) GetTransactionsByGroupInPeriod(ctx context.Context, arg GetTransactionsByGroupInPeriodParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByGroupInPeriod,
		arg.GroupID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Name,
			&i.TransactionDate,
			&i.Amount,
			&i.Category,
			&i.Note,
			&i.ByUser,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByUser = `-- name: GetTransactionsByUser :many
SELECT 
    id, group_id, name, transaction_date, amount, category, note, by_user, created_at, modified_at 
FROM "transactions"
WHERE by_user = $1
ORDER BY transaction_date desc
LIMIT $2
OFFSET $3
`

type GetTransactionsByUserParams struct {
	ByUser int64 `json:"by_user"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTransactionsByUser(ctx context.Context, arg GetTransactionsByUserParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByUser, arg.ByUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Name,
			&i.TransactionDate,
			&i.Amount,
			&i.Category,
			&i.Note,
			&i.ByUser,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByUserInPeriod = `-- name: GetTransactionsByUserInPeriod :many
SELECT id, group_id, name, transaction_date, amount, category, note, by_user, created_at, modified_at FROM "transactions"
WHERE 
    by_user = $1 
    AND transaction_date between $4::date and $5::date
ORDER BY transaction_date desc
LIMIT $2
OFFSET $3
`

type GetTransactionsByUserInPeriodParams struct {
	ByUser    int64     `json:"by_user"`
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) GetTransactionsByUserInPeriod(ctx context.Context, arg GetTransactionsByUserInPeriodParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByUserInPeriod,
		arg.ByUser,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Name,
			&i.TransactionDate,
			&i.Amount,
			&i.Category,
			&i.Note,
			&i.ByUser,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT 
    id, group_id, name, transaction_date, amount, category, note, by_user, created_at, modified_at 
FROM "transactions"
ORDER BY transaction_date desc
LIMIT $1
OFFSET $2
`

type ListTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Name,
			&i.TransactionDate,
			&i.Amount,
			&i.Category,
			&i.Note,
			&i.ByUser,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE "transactions"
SET
    group_id = $2,
    name = $3,
    transaction_date = $4,
    amount = $5,
    category = $6,
    note = $7,
    by_user = $8
WHERE id = $1
RETURNING id, group_id, name, transaction_date, amount, category, note, by_user, created_at, modified_at
`

type UpdateTransactionParams struct {
	ID              int64           `json:"id"`
	GroupID         int64           `json:"group_id"`
	Name            string          `json:"name"`
	TransactionDate time.Time       `json:"transaction_date"`
	Amount          decimal.Decimal `json:"amount"`
	Category        *string         `json:"category"`
	Note            *string         `json:"note"`
	ByUser          int64           `json:"by_user"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction,
		arg.ID,
		arg.GroupID,
		arg.Name,
		arg.TransactionDate,
		arg.Amount,
		arg.Category,
		arg.Note,
		arg.ByUser,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Name,
		&i.TransactionDate,
		&i.Amount,
		&i.Category,
		&i.Note,
		&i.ByUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getTransactionsByGroup = `-- name: getTransactionsByGroup :many
SELECT 
    id, group_id, name, transaction_date, amount, category, note, by_user, created_at, modified_at
FROM "transactions"
WHERE group_id = $1
ORDER BY transaction_date desc
LIMIT $2
OFFSET $3
`

type getTransactionsByGroupParams struct {
	GroupID int64 `json:"group_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) getTransactionsByGroup(ctx context.Context, arg getTransactionsByGroupParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByGroup, arg.GroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Name,
			&i.TransactionDate,
			&i.Amount,
			&i.Category,
			&i.Note,
			&i.ByUser,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
