// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group_member.sql

package db

import (
	"context"
	"time"
)

const createGroupMember = `-- name: CreateGroupMember :one
INSERT INTO group_members (group_id, user_id)
VALUES ($1, $2)
RETURNING id, group_id, member_name, user_id, created_at
`

type CreateGroupMemberParams struct {
	GroupID int64  `json:"group_id"`
	UserID  *int64 `json:"user_id"`
}

func (q *Queries) CreateGroupMember(ctx context.Context, arg CreateGroupMemberParams) (GroupMember, error) {
	row := q.db.QueryRow(ctx, createGroupMember, arg.GroupID, arg.UserID)
	var i GroupMember
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.MemberName,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroupMember = `-- name: DeleteGroupMember :one
DELETE FROM group_members
WHERE id = $1
RETURNING id, group_id, member_name, user_id, created_at
`

func (q *Queries) DeleteGroupMember(ctx context.Context, id int64) (GroupMember, error) {
	row := q.db.QueryRow(ctx, deleteGroupMember, id)
	var i GroupMember
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.MemberName,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroupMembersByGroupID = `-- name: DeleteGroupMembersByGroupID :many
DELETE FROM group_members
WHERE group_id = $1
RETURNING id, group_id, member_name, user_id, created_at
`

func (q *Queries) DeleteGroupMembersByGroupID(ctx context.Context, groupID int64) ([]GroupMember, error) {
	rows, err := q.db.Query(ctx, deleteGroupMembersByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupMember{}
	for rows.Next() {
		var i GroupMember
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.MemberName,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupMemberByID = `-- name: GetGroupMemberByID :one
SELECT 
  gm.id, gm.group_id, gm.member_name, gm.user_id, gm.created_at,
  g.name AS group_name,
  u.name AS user_name
FROM group_members gm
JOIN groups g ON gm.group_id = g.id 
JOIN users u ON gm.user_id = u.id
WHERE gm.id = $1 LIMIT 1
`

type GetGroupMemberByIDRow struct {
	ID         int64     `json:"id"`
	GroupID    int64     `json:"group_id"`
	MemberName *string   `json:"member_name"`
	UserID     *int64    `json:"user_id"`
	CreatedAt  time.Time `json:"created_at"`
	GroupName  string    `json:"group_name"`
	UserName   string    `json:"user_name"`
}

func (q *Queries) GetGroupMemberByID(ctx context.Context, id int64) (GetGroupMemberByIDRow, error) {
	row := q.db.QueryRow(ctx, getGroupMemberByID, id)
	var i GetGroupMemberByIDRow
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.MemberName,
		&i.UserID,
		&i.CreatedAt,
		&i.GroupName,
		&i.UserName,
	)
	return i, err
}

const listGroupMembersByGroupID = `-- name: ListGroupMembersByGroupID :many
SELECT 
  gm.id, gm.group_id, gm.member_name, gm.user_id, gm.created_at,
  g.name AS group_name,
  u.name AS user_name
FROM group_members gm
JOIN groups g ON gm.group_id = g.id
JOIN users u ON gm.user_id = u.id
WHERE gm.group_id = $1
ORDER BY gm.id
LIMIT $1
OFFSET $2
`

type ListGroupMembersByGroupIDParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListGroupMembersByGroupIDRow struct {
	ID         int64     `json:"id"`
	GroupID    int64     `json:"group_id"`
	MemberName *string   `json:"member_name"`
	UserID     *int64    `json:"user_id"`
	CreatedAt  time.Time `json:"created_at"`
	GroupName  string    `json:"group_name"`
	UserName   string    `json:"user_name"`
}

func (q *Queries) ListGroupMembersByGroupID(ctx context.Context, arg ListGroupMembersByGroupIDParams) ([]ListGroupMembersByGroupIDRow, error) {
	rows, err := q.db.Query(ctx, listGroupMembersByGroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListGroupMembersByGroupIDRow{}
	for rows.Next() {
		var i ListGroupMembersByGroupIDRow
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.MemberName,
			&i.UserID,
			&i.CreatedAt,
			&i.GroupName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroupMember = `-- name: UpdateGroupMember :one
UPDATE group_members
SET group_id = $1, user_id = $2
WHERE id = $3
RETURNING id, group_id, member_name, user_id, created_at
`

type UpdateGroupMemberParams struct {
	GroupID int64  `json:"group_id"`
	UserID  *int64 `json:"user_id"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateGroupMember(ctx context.Context, arg UpdateGroupMemberParams) (GroupMember, error) {
	row := q.db.QueryRow(ctx, updateGroupMember, arg.GroupID, arg.UserID, arg.ID)
	var i GroupMember
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.MemberName,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
